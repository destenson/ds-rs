name: Test Orchestration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - quick
          - unit
          - integration
          - e2e
          - backend-mock
          - backend-standard

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick validation checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        continue-on-error: true
      
      - name: Run clippy
        run: cargo clippy --all -- -D warnings
        continue-on-error: true
      
      - name: Check build
        run: cargo check --all

  # Unit tests on multiple platforms
  unit-tests:
    name: Unit Tests (${{ matrix.os }})
    needs: quick-checks
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      
      - name: Install GStreamer (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            gstreamer1.0-tools
      
      - name: Install GStreamer (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install gstreamer
          echo "C:\gstreamer\1.0\msvc_x86_64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Install GStreamer (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli
      
      - name: Run unit tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh unit
      
      - name: Run unit tests (Windows)
        if: runner.os == 'Windows'
        run: |
          python scripts/test-orchestrator.py --scenario unit
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.os }}
          path: |
            target/debug/test-*.xml
            test-results.json

  # Integration tests
  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install GStreamer and RTSP server
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            libgstrtspserver-1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            gstreamer1.0-tools \
            gstreamer1.0-rtsp
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli
      
      - name: Run integration tests
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh integration
        timeout-minutes: 15
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-artifacts
          path: |
            /tmp/rtsp_server.out
            /tmp/rtsp_server.err
            test-results.json

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    needs: integration-tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install GStreamer and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            libgstrtspserver-1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            gstreamer1.0-tools \
            gstreamer1.0-rtsp \
            ffmpeg
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-e2e-
            ${{ runner.os }}-cargo-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli
      
      - name: Build release binaries
        run: cargo build --release --all
      
      - name: Run end-to-end tests
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh e2e
        timeout-minutes: 20
      
      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-videos
          path: |
            crates/ds-rs/*.mp4
            crates/ds-rs/*.mkv
            test-results.json

  # Backend-specific tests
  backend-tests:
    name: Backend Tests (${{ matrix.backend }})
    needs: unit-tests
    strategy:
      matrix:
        backend: [mock, standard]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install GStreamer
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav \
            gstreamer1.0-tools
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-backend-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-backend-
            ${{ runner.os }}-cargo-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli
      
      - name: Run backend tests
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh backend-${{ matrix.backend }}
        env:
          FORCE_BACKEND: ${{ matrix.backend }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-${{ matrix.backend }}-test-results
          path: test-results.json

  # Test summary
  test-summary:
    name: Test Summary
    needs: [quick-checks, unit-tests, integration-tests, e2e-tests, backend-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Generate test report
        run: |
          echo "# Test Execution Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.quick-checks.result }}" == "success" ]; then
            echo "✅ Quick Checks: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quick Checks: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.backend-tests.result }}" == "success" ]; then
            echo "✅ Backend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Test artifacts have been uploaded and are available for download." >> $GITHUB_STEP_SUMMARY
      
      - name: Set exit code
        if: |
          needs.quick-checks.result != 'success' ||
          needs.unit-tests.result != 'success' ||
          needs.integration-tests.result != 'success' ||
          needs.e2e-tests.result != 'success' ||
          needs.backend-tests.result != 'success'
        run: exit 1